buildscript {
    dependencies {
        classpath 'com.h2database:h2:1.4.191'
        classpath 'org.jooq:jooq-codegen:3.9.1'
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.4.RELEASE'
    id 'groovy'
    id 'idea'
    id "org.flywaydb.flyway" version "4.2.0"
}

def defaultEncoding = 'UTF-8'
def jdkVersion = '1.8'

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

ext['thymeleaf.version'] = '3.0.2.RELEASE'
ext['thymeleaf-layout-dialect.version'] = '2.1.1'

jar {
    baseName = 'otameshiwebbapp'
    version =  '0.0.1-SNAPSHOT'
}

compileJava {
    options.encoding = defaultEncoding
}

compileTestJava {
    options.encoding = defaultEncoding
}

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('commons-codec:commons-codec:1.10')
    compile('com.h2database:h2:1.4.195')
    compile('org.projectlombok:lombok:1.16.16')
    compile "org.flywaydb:flyway-core:4.2.0"
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile 'org.codehaus.groovy:groovy-all:2.4.11'
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    testCompile 'org.jsoup:jsoup:1.10.2'
    testCompile 'org.springframework.security:spring-security-test:4.2.2.RELEASE'
    testCompile 'org.mockito:mockito-core:2.+'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}
check.dependsOn integrationTest

flyway {
    url = 'jdbc:h2:file:~/dev/data/study_springboot'
    user = 'sa'
}

idea {
    project {
        jdkName = jdkVersion
        languageLevel = jdkVersion
    }
    module {
        inheritOutputDirs = true
        scopes.TEST.plus += [ configurations.integrationTestCompile]
    }
}

bootRun {
    addResources = true
}

task generateJooq << {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
        jdbc() {
            driver('org.h2.Driver')
            url('jdbc:h2:~/dev/data/study_springboot')
            user('sa')
            password('')
        }
        generator() {
            database() {
                name('org.jooq.util.h2.H2Database')
                inclueds('.*')
                excludes('schema_version')
                inputSchema('PUBLIC')
            }
            generate([:]) {
                records true
                pojos false
                daos false
                immutablePojos false
            }
            target() {
                packageName('example.jooq')
                directory('src/main/java')
            }
        }
    }

    // Run the code generator
    // ----------------------
    org.jooq.util.GenerationTool.generate(
            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
}
